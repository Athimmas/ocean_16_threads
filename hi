./advection.F90:   use grid, only: dz, DXT, DYT, HUW, HUS, c2dz, KMT, HTE, UAREA_R, DZT,    &
./advection.F90:               if (k <= KMT(i,j,bid)) then
./advection.F90:               if (k <= KMT(i,j,bid)) then
./advection.F90:             if (k /= KMT(i,j,bid)) then
./advection.F90:          if (k <= KMT(i,j,bid)) then
./advection.F90:         WTKB = merge(WTK+FC, c0, k < KMT(:,:,bid))
./advection.F90:         WTKB = merge(WTK+dz(k)*FC, c0, k < KMT(:,:,bid))
./advection.F90:      if ( k < KMT(i,j,bid)-1 ) then
./advection.F90:   KMASKE = merge(c1, c0, k <= KMT(:,:,bid) .and. k <= KMTE(:,:,bid))
./advection.F90:   KMASKN = merge(c1, c0, k <= KMT(:,:,bid) .and. k <= KMTN(:,:,bid))
./advection.F90:            if (k+1 <= KMT(i,j,bid)) then
./advection.F90:                  if (k+2 <= KMT(i,j,bid)) then
./advection.F90:            else ! (k+1>KMT)
./baroclinic.F90:   use grid, only: FCOR, DZU, HUR, KMU, KMT, sfc_layer_type,                 &
./baroclinic.F90:           where (k <= KMT(:,:,iblock))
./baroclinic.F90:             where (k <= KMT(:,:,iblock))
./baroclinic.F90:             where (k <= KMT(:,:,iblock))
./baroclinic.F90:                  where (KMT(:,:,iblock) > 0)  ! corrector RHS at k=1
./baroclinic.F90:                  where (KMT(:,:,iblock) > 0)
./baroclinic.F90:                  where (KMT(:,:,iblock) > 0)
./baroclinic.F90:                  where (KMT(:,:,iblock) > 0)
./baroclinic.F90:                  where (KMT(:,:,iblock) > 0)
./baroclinic.F90:                  where (KMT(:,:,iblock) > 0)
./baroclinic.F90:   !!dir$ in( KAPPA_ISOP,KAPPA_THIC,HOR_DIFF,KAPPA_VERTICAL,KAPPA_LATERAL,HXY,HYX,RX,RY,RB,RBR,KMT,KMTE,KMTN,BUOY_FREQ_SQ : alloc_if(.true.) free_if(.false.)) &
./baroclinic.F90:   !!dir$ nocopy(HYX,HXY,RX,RY,TX,TY,TZ,WTOP_ISOP,WBOT_ISOP,RB,RBR,KMT,KMTE,KMTN,SIGMA_TOPO_MASK,UIT,VIT : alloc_if(.false.) free_if(.false.) ) & 
./baroclinic.F90:            where (k <= KMT(:,:,bid))            &
./baroclinic.F90:            where (k <= KMT(:,:,bid))            &
./baroclinic.F90:         where (k <= KMT(:,:,bid))
./baroclinic.F90:         where (k <= KMT(:,:,bid)) DIAG_TRACER_ADV_2D(:,:,n,bid) = & 
./baroclinic.F90:         where (k <= KMT(:,:,bid)) DIAG_TRACER_ADV_2D(:,:,n,bid) = &
./baroclinic.F90:         where (k <= KMT(:,:,bid)) DIAG_TRACER_VDIFF_2D(:,:,n,bid) = &
./baroclinic.F90:         where (k <= KMT(:,:,bid)) DIAG_TRACER_VDIFF_2D(:,:,n,bid) = &
./baroclinic.F90:         where (k <= KMT(:,:,bid)) DIAG_TRACER_SOURCE_2D(:,:,n,bid) = &
./baroclinic.F90:         where (k <= KMT(:,:,bid)) DIAG_TRACER_SOURCE_2D(:,:,n,bid) = &
./baroclinic.F90:            where (KMT(:,:,bid) > 0)  ! RHS for predictor
./baroclinic.F90:                                  c0, k <= KMT(:,:,bid))
./baroclinic.F90:                                  c0, k <= KMT(:,:,bid))
./baroclinic.F90:               where (KMT(:,:,bid) > 0)
./baroclinic.F90:                                     c0, k <= KMT(:,:,bid))
./baroclinic.F90:                                     c0, k <= KMT(:,:,bid))
./baroclinic.F90:            where (k <= KMT(:,:,bid))
./barotropic.F90:          KMT, FCOR, HU, CALCT, sfc_layer_rigid, sfc_layer_oldfree 
./barotropic.F90:            where(KMT(:,:,iblock) > 0 .and. &
./barotropic.F90:            where(KMT(:,:,iblock) > 0) 
./budget_diagnostics.F90:       WORK3(:,:,:) = merge (WORK1(:,:,:)*TAREA(:,:,:), c0, KMT(:,:,:) >= k)
./cfc11_mod.F90:   use grid, only: KMT, zt, zw, n_topo_smooth, fill_points
./cfc11_mod.F90:          where (k > KMT(:,:,iblock))
./cfc11_mod.F90:    LAND_MASK = (KMT.gt.0)
./cfc11_mod.F90:   use grid, only: KMT, zt, zw
./cfc_mod.F90:   use grid, only: KMT, n_topo_smooth, fill_points
./cfc_mod.F90:         where (k > KMT(:,:,iblock))
./cfc_mod.F90:   LAND_MASK = (KMT.gt.0)
./diag_bsf.F90:   call gather_global (WORK1, KMT, master_task,distrb_clinic)
./diagnostics.F90:                                c0, k <= KMT(:,:,iblock))
./diagnostics.F90:                                   c0, k <= KMT(:,:,iblock))
./diagnostics.F90:                                   c0, k <= KMT(:,:,iblock))
./diagnostics.F90:                               ,c0,KMT(:,:,iblock) >= k)
./diagnostics.F90:                                   c0,KMT(:,:,iblock) >= k)
./diagnostics.F90:                                   c0,KMT(:,:,iblock) >= k)
./diags_on_lat_aux_grid.F90:   call gather_global (WORK_G, KMT, ioroot,distrb_clinic)
./diags_on_lat_aux_grid.F90:        WORK1(:,:,iblock) = merge(W_E(:,:,k,iblock)*TAREA(:,:,iblock), c0, k <= KMT(:,:,iblock))
./diags_on_lat_aux_grid.F90:          WORK1(:,:,iblock) = merge(W_I(:,:,k,iblock)*TAREA(:,:,iblock), c0, k <= KMT(:,:,iblock))
./diags_on_lat_aux_grid.F90:          WORK1(:,:,iblock) = merge(W_SM(:,:,k,iblock)*TAREA(:,:,iblock), c0, k <= KMT(:,:,iblock))
./domain.F90:      KMTG             ! global KMT (topography) field
./drifters.F90:         write(nu)kmt
./ecosys_mod.F90:            where (.not. LAND_MASK(:,:,iblock) .or. k > KMT(:,:,iblock))
./ecosys_mod.F90:   where (.not. LAND_MASK(:,:,bid) .or. k > KMT(:,:,bid))
./ecosys_mod.F90:      where (.not. LAND_MASK(:,:,bid) .or. k > KMT(:,:,bid))
./ecosys_mod.F90:   where (.not. LAND_MASK(:,:,bid) .or. k > KMT(:,:,bid)) PAR_in = c0
./ecosys_mod.F90:         call comp_CO3terms(bid, j, k, LAND_MASK(:,j,bid) .and. k <= KMT(:,j,bid), .true., &
./ecosys_mod.F90:            call comp_CO3terms(bid, j, k, LAND_MASK(:,j,bid) .and. k <= KMT(:,j,bid), .false., &
./ecosys_mod.F90:      call comp_co3_sat_vals(k, LAND_MASK(:,:,bid) .and. k <= KMT(:,:,bid), &
./ecosys_mod.F90:            where (ZSATCALC(:,:,bid) == -c1 .and. KMT(:,:,bid) == k)
./ecosys_mod.F90:            where (ZSATARAG(:,:,bid) == -c1 .and. KMT(:,:,bid) == k)
./ecosys_mod.F90:            where (kk <= KMT(:,:,bid) .and. (WORK1 < WORK2))
./ecosys_mod.F90:                    LAND_MASK(:,:,bid) .and. (k <= KMT(:,:,bid)))
./ecosys_mod.F90:            WORK2 = merge(DZT(:,:,k,bid) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(dz(k) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                               c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, DZT(:,:,k,bid)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + DZT(:,:,k,bid) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, dz(k)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + dz(k) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(DZT(:,:,k,bid) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(dz(k) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                               c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, DZT(:,:,k,bid)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + DZT(:,:,k,bid) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, dz(k)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + dz(k) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(DZT(:,:,k,bid) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(dz(k) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                               c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, DZT(:,:,k,bid)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + DZT(:,:,k,bid) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, dz(k)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + dz(k) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(DZT(:,:,k,bid) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(dz(k) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                               c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, DZT(:,:,k,bid)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + DZT(:,:,k,bid) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:            WORK2 = merge(min(100.0e2_r8 - ztop, dz(k)) * WORK1, c0, k<=KMT(:,:,bid))
./ecosys_mod.F90:                                  c0, ztop + dz(k) <= 100.0e2_r8 .and. k<=KMT(:,:,bid))
./ecosys_mod.F90:         if (LAND_MASK(i,j,bid) .and. k <= KMT(i,j,bid)) then
./ecosys_mod.F90:         if (LAND_MASK(i,j,bid) .and. (k == KMT(i,j,bid))) then
./ecosys_mod.F90:            if (k == KMT(i,j,bid)) then
./ecosys_mod.F90:            where (.not. LAND_MASK(:,:,iblock) .or. k > KMT(:,:,iblock)) &
./ecosys_mod.F90:            where (.not. LAND_MASK(:,:,iblock) .or. k > KMT(:,:,iblock)) &
./ecosys_mod.F90:            where (.not. LAND_MASK(:,:,iblock) .or. k > KMT(:,:,iblock)) &
./ecosys_mod.F90:         if (KMT(i,j,iblock) > 0 .and. KMT(i,j,iblock) < km) then
./ecosys_mod.F90:            do k=KMT(i,j,iblock)+1,km
./ecosys_mod.F90:            FESEDFLUX(i,j,KMT(i,j,iblock),iblock) = FESEDFLUX(i,j,KMT(i,j,iblock),iblock) + subsurf_fesed
./ecosys_mod.F90:         where (.not. LAND_MASK(:,:,iblock) .or. k > KMT(:,:,iblock)) &
./ecosys_mod.F90:                                 domAreaName='TAREA', domMaskName='KMT',       &
./forcing.F90:         where (KMT(:,:,iblock) > 0)
./forcing.F90:         where (KMT(:,:,iblock) > 0)
./forcing.F90:            where (KMT(:,:,iblock) > 0)
./forcing.F90:            where (KMT(:,:,iblock) > 0) ! convert to kg(freshwater)/m^2/s
./forcing.F90:            where (KMT(:,:,iblock) > 0) ! convert to kg(freshwater)/m^2/s
./forcing.F90:         where (KMT(:,:,iblock) > 0)
./forcing.F90:            where (KMT(:,:,iblock) > 0)
./forcing.F90:            where (KMT(:,:,iblock) > 0) ! convert to kg(freshwater)/m^2/s
./forcing_sfwf.F90:                               c0, k <= KMT(:,:,iblock) .and.       &
./forcing_sfwf.F90:                               c0, k <= KMT(:,:,iblock) .and.   &
./forcing_sfwf.F90:      where (KMT(:,:,iblock) > 0)
./forcing_sfwf.F90:      where (KMT(:,:,iblock) > 0 .and. MASK_SR(:,:,iblock) == 0) 
./forcing_sfwf.F90:                 c0, KMT(:,:,iblock) > 0 .and. MASK_SR(:,:,iblock) > 0)
./forcing_sfwf.F90:                                      KMT(:,:,iblock) > 0 .and.   &
./forcing_sfwf.F90:                                      c0, KMT(:,:,iblock) > 0 .and.   &
./forcing_sfwf.F90:                        k <= KMT(:,:,iblock) .and.               &
./forcing_sfwf.F90:                        k <= KMT(:,:,iblock) .and.               &
./forcing_sfwf.F90:      where (KMT(:,:,iblock) > 0)
./forcing_sfwf.F90:      where (KMT(:,:,iblock) > 0 .and. MASK_SR(:,:,iblock) == 0)
./forcing_sfwf.F90:        where (KMT(:,:,iblock) > 0)
./forcing_sfwf.F90:                 c0, KMT(:,:,iblock) > 0 .and. MASK_SR(:,:,iblock) > 0)
./forcing_sfwf.F90:                                      KMT(:,:,iblock) > 0 .and.   &
./forcing_sfwf.F90:                                      c0, KMT(:,:,iblock) > 0 .and.   &
./forcing_sfwf.F90:                        k <= KMT(:,:,iblock) .and.               &
./forcing_sfwf.F90:                        k <= KMT(:,:,iblock) .and.               &
./forcing_shf.F90:      where (KMT(:,:,iblock) > 0)
./forcing_shf.F90:      where (KMT(:,:,iblock) > 0 .and. MASK_SR(:,:,iblock) == 0)
./forcing_shf.F90:      where (KMT(:,:,iblock) > 0)
./forcing_shf.F90:      where (KMT(:,:,iblock) > 0 .and. MASK_SR(:,:,iblock) == 0)
./forcing_shf.F90:      where (KMT(:,:,iblock) == 0) OCN_WGT(:,:,iblock) = c0
./grid.F90:      kmt_kmin, 	    &! minimum allowed non-zero KMT value
./grid.F90:                       ! for use in computing KMT internally
./grid.F90:   !dir$ attributes offload : mic :: KMT
./grid.F90:      KMT            ,&! k index of deepest grid cell on T grid
./grid.F90:      KMTOLD           ! KMT field before smoothing
./grid.F90:      KMTN,KMTS,KMTE,KMTW   ,&! KMT field at neighbor points
./grid.F90:      KMTEE,KMTNN      ! KMT field 2 cells away for upwind stencil
./grid.F90:      topography_opt,       &! topography (KMT) option
./grid.F90:!  decomposition setup (ULAT, ULON, KMT).
./grid.F90:!  set up topography by getting global KMT field (used for
./grid.F90:!      move this code into init_overflows2, in case KMT needs modification
./grid.F90:      where (KMT /= 0) KMT = km
./grid.F90:      call gather_global(KMT_G, KMT, master_task, distrb_clinic)
./grid.F90:            if (KMT(i,j,n) == k) then
./grid.F90:      KMU(i,j,n) = min(KMT(i,j  ,n),KMT(i+1,j  ,n), &
./grid.F90:                       KMT(i,j+1,n),KMT(i+1,j+1,n))
./grid.F90:               if (k == KMT(i,j,n)) HT(i,j,n) = zw(k-1) + DZT(i,j,k,n)
./grid.F90:               if (k == KMT(i,j,n)) HT(i,j,n) = zw(k)
./grid.F90:      WORK = merge(TAREA, c0, k <= KMT)
./grid.F90:      WORK = merge(TAREA*dz(k), c0, k <= KMT)
./grid.F90:   nocean_t = global_sum(KMT, distrb_clinic, field_loc_center)
./grid.F90:!  Generates KMT field based on an input file containing
./grid.F90:      kmt_global       ! flag for generating only global KMT field
./grid.F90:!  compute global KMT field (for use in setting up domain)
./grid.F90:!  convert bathymetry input to global kmt array
./grid.F90:                                 'KMT non-zero at meridional boundary')
./grid.F90:!  otherwise, scatter global into local KMT field
./grid.F90:      call scatter_global(KMT, KMT_G, master_task, distrb_clinic, &
./grid.F90:!  Generates simple KMT field with idealized land masses
./grid.F90:      kmt_global       ! flag for generating only global KMT field
./grid.F90:!  compute global KMT field (for use in setting up domain)
./grid.F90:!  otherwise, set up local KMT field
./grid.F90:                     KMT(i,j,n) = KMT_G(ig,jg)
./grid.F90:                     KMT(i,j,n) = 0
./grid.F90:               KMT(:,j,n) = 0
./grid.F90:!  Reads in KMT field from file
./grid.F90:      topography_file     ! input file containing KMT field
./grid.F90:      kmt_global       ! flag for generating only global KMT field
./grid.F90:!  read global KMT field (for use in setting up domain)
./grid.F90:!  otherwise read KMT field from file
./grid.F90:      call scatter_global(KMT, KMT_G, master_task, distrb_clinic, &
./grid.F90:!  Removes isolated points from grid (KMT field)
./grid.F90:        land   = k.gt.KMT(i,j,n)
./grid.F90:        lande  = k.gt.KMT(i+1,j,n)
./grid.F90:        landw  = k.gt.KMT(i-1,j,n)
./grid.F90:        landn  = k.gt.KMT(i,j+1,n)
./grid.F90:        lands  = k.gt.KMT(i,j-1,n)
./grid.F90:            KMT(i,j,n) = KMT(i,j,n) - 1 
./grid.F90:            if ( KMT(i,j,n) .lt. kmt_kmin) then
./grid.F90:   call POP_HaloUpdate(KMT, POP_haloClinic, POP_gridHorzLocCenter,  & 
./grid.F90:         'remove_isolated_points: error updating kmt halo')
./grid.F90:!  Removes isolated points from grid (KMT field)
./grid.F90:!  (KMU field before modifying KMT field)
./grid.F90:      KMU(i,j,n) = min(KMT(i,j  ,n),KMT(i+1,j  ,n), &
./grid.F90:                       KMT(i,j+1,n),KMT(i+1,j+1,n))
./grid.F90:!  if all KMUs surrounding a T point are zero, set KMT = 0.
./grid.F90:         KMT   (i,j,n) = 0
./grid.F90:   call POP_HaloUpdate(KMT, POP_haloClinic, POP_gridHorzLocCenter,  & 
./grid.F90:         'remove_points: error updating kmt halo')
./grid.F90:!  This routine smooths topography to create new KMT, depth fields
./grid.F90:!  The depth field HT is constructed from the KMT field and
./grid.F90:!  a new KMT field is constructed from it.
./grid.F90:   KMTOLD = KMT
./grid.F90:      where (k == KMT) HT = zw(k)
./grid.F90:   where (KMT > 0)
./grid.F90:   where ((KMT /= 0) .and. (IWORK /= 0))
./grid.F90:!  new KMT field
./grid.F90:      where (HTNEW > zt(k) .and. HTNEW <= zt(k+1)) KMT = k
./grid.F90:   where (HTNEW > zt(k)) KMT = km
./grid.F90:   call POP_HaloUpdate(KMT, POP_haloClinic, POP_gridHorzLocCenter,  & 
./grid.F90:         'smooth_topography: error updating kmt halo')
./grid.F90:!  instead of logical masks and also KMT arrays for neighbor points.
./grid.F90:   where (KMT >= 1)
./grid.F90:!  depth level fields (KMT,KMU) to north,south,east,west
./grid.F90:   KMTN = eoshift(KMT,dim=2,shift=+1)
./grid.F90:   KMTS = eoshift(KMT,dim=2,shift=-1)
./grid.F90:   KMTE = eoshift(KMT,dim=1,shift=+1)
./grid.F90:   KMTW = eoshift(KMT,dim=1,shift=-1)
./grid.F90:   KMTEE = eoshift(KMT,dim=1,shift=2)
./grid.F90:   KMTNN = eoshift(KMT,dim=2,shift=2)
./grid.F90:      WORK = merge(TAREA, c0, 1 <= KMT .and. REGION_MASK == -region)
./grid.F90:                      k <= KMT .and. REGION_MASK == -region)
./grid.F90:!  if the depth-level field KMT has been smoothed, fill in
./grid.F90:!* given the smoothed KMT field and the original unsmoothed field
./grid.F90:     MASKNEW = (k <= KMT) .and. (.not. MASKOLD)
./hmix_aniso.F90:      KMU_G   			! kmt array at U points
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del2.F90:                          c0, KMT(:,:,bid) > k)
./hmix_del2.F90:                          c0, KMT(:,:,bid) > k)
./hmix_del4.F90:      where (k > KMT(:,:,bid) .or. k > KMTN(:,:,bid)) CN = c0
./hmix_del4.F90:      where (k > KMT(:,:,bid) .or. k > KMTS(:,:,bid)) CS = c0
./hmix_del4.F90:      where (k > KMT(:,:,bid) .or. k > KMTE(:,:,bid)) CE = c0
./hmix_del4.F90:      where (k > KMT(:,:,bid) .or. k > KMTW(:,:,bid)) CW = c0
./hmix_del4.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del4.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del4.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del4.F90:                                   (k <= KMT (:,:,bid)))
./hmix_del4.F90:                          c0, KMT(:,:,bid) > k)
./hmix_del4.F90:                          c0, KMT(:,:,bid) > k)
./hmix_gm.F90:         ah_bkg_bottom, &       ! backgroud horizontal diffusivity at k = KMT
./hmix_gm.F90:!     ah_bkg_bottom   : background horizontal diffusion at k=KMT (= 0)
./hmix_gm.F90:         where ( k < KMT(:,:,iblock) ) 
./hmix_gm.F90:             if ( k < KMT(i,j,iblock) ) then
./hmix_gm.F90:               if ( k == KMT(i-1,j+1,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i  ,j+1,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i+1,j+1,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i-1,j  ,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i+1,j  ,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i-1,j-1,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i  ,j-1,iblock)  .or.  &
./hmix_gm.F90:                    k == KMT(i+1,j-1,iblock) )      &
./hmix_gm.F90:      CX = merge(HYX(:,:,bid)*p25, c0, (k <= KMT (:,:,bid))   &
./hmix_gm.F90:      CY = merge(HXY(:,:,bid)*p25, c0, (k <= KMT (:,:,bid))   &
./hmix_gm.F90:                       if (kk == KMT(i,j,bid)) then
./hmix_gm.F90:              where ( kk <= KMT(:,:,bid) ) 
./hmix_gm.F90:      KMASK = merge(c1, c0, k < KMT(:,:,bid))
./hmix_gm.F90:             if( k == KMT(i,j,bid)) then
./hmix_gm.F90:                 KMASKprev = merge(c1, c0, k-1 < KMT(i,j,bid))
./hmix_gm.F90:                 KMASKprev = merge(c1, c0, km-1 < KMT(i,j,bid))        
./hmix_gm.F90:        UIB = merge( WORK1, c0, k < KMT(:,:,bid)  &
./hmix_gm.F90:        VIB = merge( WORK2, c0, k < KMT(:,:,bid)  &
./hmix_gm.F90:        WORK1 = merge( UIT(:,:,bid) - UIB, c0, k <= KMT(:,:,bid)  &
./hmix_gm.F90:        WORK2 = merge( VIT(:,:,bid) - VIB, c0, k <= KMT(:,:,bid)  &
./hmix_gm.F90:            if ( k < KMT(i,j,bid) ) then
./hmix_gm.F90:                      c0, KMT(:,:,bid) > k)
./hmix_gm.F90:!                if ( k <= KMT(i,j,bid) ) then
./hmix_gm.F90:!                if ( k <= KMT(i,j,bid) ) then
./hmix_gm.F90:            where (k < KMT(:,:,bid))
./hmix_gm.F90:            where (k < KMT(:,:,bid))
./hmix_gm.F90:          kk = KMT(i,j,bid)
./hmix_gm.F90:      where (KMT(:,:,bid) <= k1)     ! KAPPA_LATERAL=3.0e6 when depth < 100m
./hmix_gm.F90:        where (k < KMT(:,:,bid))
./hmix_gm.F90:      where ( k < KMT(:,:,bid) )
./hmix_gm.F90:        where ( k < KMT(:,:,bid) )
./hmix_gm.F90:        where ( k > 1  .and.  k == KMT(:,:,bid) )
./hmix_gm.F90:        where (k < KMT(:,:,bid))
./hmix_gm.F90:         kk,            & ! temporary value of KMT
./hmix_gm.F90:          KMASKE = merge(c1, c0, k <= KMT(:,:,bid) .and. &
./hmix_gm.F90:          KMASKN = merge(c1, c0, k <= KMT(:,:,bid) .and. &
./hmix_gm.F90:          kk = KMT(i,j,bid)
./hmix_gm.F90:      where ( KMT(:,:,bid) <= k_min )        ! KAPPA_LATERAL = kappa_min 
./hmix_gm.F90:      where ( k < KMT(:,:,bid) )
./hmix_gm.F90:        where ( k < KMT(:,:,bid) )
./hmix_gm.F90:        where ( k == KMT(:,:,bid) )
./hmix_gm.F90:      K_MIN = merge( km+1, 0, KMT(:,:,bid) /= 0 )  
./hmix_gm.F90:                 if ( k < KMT(i,j,bid) ) then
./hmix_gm.F90:                ( k <= KMT(i,j,bid) )  .and.                 &
./hmix_gm.F90:          if ( ( k >= K_MIN(i,j) ) .and. ( k < KMT(i,j,bid) ) .and. &
./hmix_gm.F90:        if ( k == KMT(i,j,bid)-1 ) then
./hmix_gm.F90:         if ( ( k > K_MIN(i,j) ) .and. ( k <= KMT(i,j,bid) ) ) then
./hmix_gm.F90:      COMPUTE_TLT = merge(.true., .false., KMT(:,:,bid) /= 0)
./hmix_gm.F90:                      if ( KMT(i,j,bid) == 0  .or.  K_START(i,j) > KMT(i,j,bid)  .or.  &
./hmix_gm.F90:                      ( K_START(i,j) == KMT(i,j,bid)  .and.  K_SUB(i,j) == kbt ) ) then
./hmix_gm.F90:                         K_START(i,j) < KMT(i,j,bid)  .and.  K_START(i,j) == k ) then
./hmix_gm.F90:                         if ( COMPUTE_TLT(i,j)  .and.  K_START(i,j) <= KMT(i,j,bid)  .and. &
./hmix_gm.F90:                         if ( COMPUTE_TLT(i,j)  .and.  K_START(i,j) < KMT(i,j,bid)  .and. &
./hmix_gm.F90:                         if ( COMPUTE_TLT(i,j)  .and.  K_START(i,j) == KMT(i,j,bid)  .and. &
./hmix_gm.F90:                      if ( KMT(i,j,bid) /= 0  .and.  &
./hmix_gm.F90:                      if ( KMT(i,j,bid) == 0  .and.  &
./hmix_gm.F90:                       TLT%K_LEVEL(i,j,bid) < KMT(i,j,bid)  .and.  &
./hmix_gm.F90:                       TLT%K_LEVEL(i,j,bid) < KMT(i,j,bid)  .and. &
./hmix_gm.F90:          LMASK(i,j) = LMASK(i,j) .and. TLT%K_LEVEL(i,j,bid) + 1 < KMT(i,j,bid)
./hmix_gm.F90:                if (KMT(i,j,bid) /= 0) then
./hmix_gm.F90:                if ((KMT(i,j,bid) /= 0) .AND. (TLT%THICKNESS(i,j,bid) > eps))then
./hmix_gm.F90:                       .and.  k <= KMT(i,j,bid) ) then
./hmix_gm.F90:                .and.  k <= KMT(i,j,bid) ) then
./hmix_gm.F90:                       .and.  k <= KMT(i,j,bid) ) then
./hmix_gm.F90:                 .and.  k <= KMT(i,j,bid) ) then
./hmix_gm.F90:              .and.  k <= KMT(i,j,bid)  .and.                           &
./hmix_gm.F90:                  .and.  k <= KMT(i,j,bid) ) then
./hmix_gm_submeso_share.F90:   use grid, only: KMTE, KMT, KMTN
./hmix_gm_submeso_share.F90:                if ( kk <= KMT(i,j,bid) .and. kk <= KMTE(i,j,bid) ) then
./hmix_gm_submeso_share.F90:                if ( kk <= KMT(i,j,bid) .and. kk <= KMTN(i,j,bid) ) then
./hmix_gm_submeso_share.F90:                 KMASK = merge(c1, c0, kk < KMT(i,j,bid))
./hmix_gm_submeso_share.F90:                 KMASKE = merge(c1, c0, kk+1 <= KMT(i,j,bid) .and.  &
./hmix_gm_submeso_share.F90:                 KMASKN = merge(c1, c0, kk+1 <= KMT(i,j,bid) .and.  &
./hmix_gm_submeso_share.F90:                 kmaskeim1 = merge(c1, c0, kk+1 <= KMT(i-1,j,bid) .and.  &
./hmix_gm_submeso_share.F90:                 kmasknjm1 = merge(c1, c0, kk+1 <= KMT(i,j-1,bid) .and.  &
./hmix_gm_submeso_share.F90:              if ( kk+1 <= KMT(i,j,bid) ) then
./horizontal_mix.F90:   use grid, only: KMT, dz, partial_bottom_cells, DZT, dzr, dzwr
./horizontal_mix.F90:        !where (k <= KMT(:,:,bid)) WORK = DZT(:,:,k,bid)*HDTK(:,:,1)
./horizontal_mix.F90:        !where (k <= KMT(:,:,bid)) WORK = dz(k)*HDTK(:,:,1)
./horizontal_mix.F90:        !where (k <= KMT(:,:,bid)) WORK = DZT(:,:,k,bid)*HDTK(:,:,2)
./horizontal_mix.F90:        !where (k <= KMT(:,:,bid)) WORK = dz(k)*HDTK(:,:,2)
./horizontal_mix.F90:                             ,c0, k < KMT(:,:,bid))*dzr(k)
./horizontal_mix.F90:                             ,c0, k < KMT(:,:,bid))*dzr(k)
./horizontal_mix_unified.F90:         ah_bkg_bottom_unified, &       ! backgroud horizontal diffusivity at k = KMT
./horizontal_mix_unified.F90: use grid, only: KMT, dz, partial_bottom_cells, DZT, dzr, dzwr,KMTE, KMT,&
./horizontal_mix_unified.F90:   KMT_unified = KMT
./horizontal_mix_unified.F90:   print *,"KMT is",KMT_UNIFIED(45,45,1),KMT(45,45,1)
./horizontal_mix_unified.F90:       !!$OMP PARALLEL DO DEFAULT(NONE)PRIVATE(i,j)SHARED(reference_depth,ML_DEPTH,KMT,WORK3,WORK2,WORK1,TIME_SCALE_UNIFIED,HLS,SF_SUBM_X_UNIFIED,SF_SUBM_Y_UNIFIED) &
./horizontal_mix_unified.F90:            print *,"KMT(45,45,bid)",KMT_UNIFIED(i,j,bid)
./iage_mod.F90:   use grid, only: KMT, n_topo_smooth, fill_points
./iage_mod.F90:            where (k > KMT(:,:,iblock))
./ice.F90:       partial_bottom_cells, KMT, DZT, DZ, freq_opt_nmonth, dt, tmix_matsuno,&
./ice.F90:          where (k <= KMT(:,:,bid)) &
./ice.F90:          where (k <= KMT(:,:,bid)) &
./ice.F90:     where ( k <= KMT(:,:,bid) )
./ice.F90:     where (k <= KMT(:,:,bid))
./ice.F90:   where ( k <= KMT(:,:,bid) )
./initial.F90:   use grid, only: init_grid1, init_grid2, kmt, kmt_g, n_topo_smooth, zt,    &
./initial.F90:!  KMT can be done (and NOT in init_grid2) for possible KMT mods; then
./initial.F90:             where (k > KMT(:,:,iblock)) &
./initial.F90:            where (k <= KMT(:,:,iblock))
./initial.F90:            where (k <= KMT(:,:,iblock))
./initial.F90:             where (k > KMT(:,:,iblock)) &
./mix_submeso.F90:          if( KMT(i,j,bid) == 0 ) then
./mix_submeso.F90:           if ( KMT(i,j,bid) > 0 ) then
./mix_submeso.F90:           if ( KMT(i,j,bid) > 0 ) then
./mix_submeso.F90:           if( KMT(i,j,bid) > 0 )then
./mix_submeso.F90:            if( KMT(i,j,bid) == 0 ) then
./mix_submeso.F90:             if ( KMT(i,j,bid) > 0 ) then
./mix_submeso.F90:       !!$OMP PARALLEL DO DEFAULT(NONE)PRIVATE(i,j)SHARED(reference_depth,ML_DEPTH,KMT,WORK3,WORK2,WORK1,TIME_SCALE,HLS,SF_SUBM_X,SF_SUBM_Y) &
./mix_submeso.F90:                    KMT(i,j,bid) >= k ) then
./mix_submeso.F90:           USMB(i,j) = merge( WORK1(i,j), c0, k < KMT(i,j,bid) .and. k < KMTE(i,j,bid) )
./mix_submeso.F90:           VSMB(i,j) = merge( WORK2(i,j), c0, k < KMT(i,j,bid) .and. k < KMTN(i,j,bid) )
./mix_submeso.F90:            WORK1(i,j) = merge( USMT(i,j) - USMB(i,j), c0, k <= KMT(i,j,bid)  &
./mix_submeso.F90:            WORK2(i,j) = merge( VSMT(i,j) - VSMB(i,j), c0, k <= KMT(i,j,bid)  &
./mix_submeso.F90:         if ( k < KMT(i,j,bid)  .and.  ( zw(k) < max( ML_DEPTH(i,j),  &
./mix_submeso.F90:             !if ( k <= KMT(i,j,bid) ) then
./mix_submeso.F90:             !if ( k <= KMT(i,j,bid) ) then
./mix_submeso.F90:      CX = merge(HYX(:,:,bid)*p25, c0, (k <= KMT (:,:,bid))   &
./mix_submeso.F90:      CY = merge(HXY(:,:,bid)*p25, c0, (k <= KMT (:,:,bid))   &
./mix_submeso.F90:            print *,"KMT(45,45,bid)",KMT(i,j,bid) 
./mix_submeso.F90:      KMASK = merge(c1, c0, k < KMT(:,:,bid))
./mix_submeso.F90:                  KMASKprev = merge(c1, c0, k-1 < KMT(i,j,bid))
./mix_submeso.F90:                  KMASKprev = merge(c1, c0, k-1 < KMT(i,j,bid))
./niw_mixing.F90:       where ( k >= KBL .and. k < KMT(:,:,bid) )
./niw_mixing.F90:       where ( k >= KBL .and. k < KMT(:,:,bid) )
./niw_mixing.F90:       where ( k >= KBL .and. k < KMT(:,:,bid) )
./ocn_comp_mct.F90:   use grid,              only: TLAT, TLON, KMT
./ocn_comp_mct.F90:          data(n) = float(KMT(i,j,iblock)) 
./operators.F90:      if (k <= KMT(i,j,bid)) then
./operators.F90:      if (k <= KMT(i,j,bid)) then
./operators.F90:         do k=KMT(i,j,bid),1,-1
./operators.F90:         do k=KMT(i,j,bid),1,-1
./overflows.F90:! kmt changes if any
./overflows.F90:         write(stdout,*) 'Overflows on with kmt topography changes out of range'
./overflows.F90:! kmt locations
./overflows.F90:!  scattering KMT_G to KMT, then modifying if desired, and finally 
./overflows.F90:!  scatter KMT_G to KMT if topography_opt = file 
./overflows.F90:!  modify KMT for overflows if desired and ccsm_startup run
./overflows.F90:!  make kmt changes regardless of overflows_interactive
./overflows.F90:!  This routine modifies kmt as required by overflows, if on
./overflows.F90:      kmterr                ! error index for kmt changes
./overflows.F90:!  search through kmt and modify for overflows
./overflows.F90:                         write(stdout,100) KMT(i,j,iblock),ovf(n)%loc_kmt(m)%i, &
./overflows.F90:                         100 format(' init_overflows_kmt: KMT = ',i5,&
./overflows.F90:                         if( KMT(i,j,iblock) .ne. ovf(n)%loc_kmt(m)%korg ) then
./overflows.F90:                         KMT(i,j,iblock) = ovf(n)%loc_kmt(m)%knew
./overflows.F90:     200 format(' init_overflows_kmt: kmt inconsistencies for ',i3,' points',/ &
./overflows.F90:                ' original kmt not equal to actual kmt')
./overflows.F90:         call exit_POP(sigAbort,'ERROR kmt inconsistency for overflows')
./overflows.F90:   call POP_HaloUpdate(KMT, POP_haloClinic, POP_gridHorzLocCenter,  &
./overflows.F90:         ! kmt changes, if any
./overflows.F90:1090     format(2x,i10,20x,'! number of kmt changes')
./overflows.F90:1091        format(2x,i10,20x,'! i grid box index for kmt change')
./overflows.F90:1092        format(2x,i10,20x,'! j grid box index for kmt change')
./overflows.F90:! kmt changes, if any
./overflows.F90:! kmt changes, if any
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflows.F90:                     if( k == KMT(i,j,iblock) ) then
./overflow_type.F90:      max_kmt      =   200,&  ! max no. overflow kmt changes
./overflow_type.F90:   type, public :: ovf_kmtbox        ! overflow grid-box for kmt changes
./overflow_type.F90:        korg              ,&  ! original kmt value
./overflow_type.F90:        knew                  ! new kmt value
./overflow_type.F90:!     kmt changes) given by src locations, transporting mean tracers from
./overflow_type.F90:  ! kmt mods
./overflow_type.F90:   integer   (int_kind)          :: num_kmt               ! no. of kmt changes
./overflow_type.F90:      type      (ovf_kmtbox)        :: loc_kmt(max_kmt)      ! kmt locs
./passive_tracers.F90:   use grid, only: partial_bottom_cells, DZT, KMT, dz, zw, &
./passive_tracers.F90:                               c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                               c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                  * TRACER_SOURCE(:,:,n), c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                  * TRACER_SOURCE(:,:,n), c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                  * TRACER(:,:,k,n,curtime,bid), c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                     * TRACER(:,:,k,n,curtime,bid), c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                     * TRACER(:,:,k,n,curtime,bid), c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                      * TRACER(:,:,k,n,oldtime,bid)) / c2dtt(k), c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                  c0, k<=KMT(:,:,bid))
./passive_tracers.F90:                                  c0, k<=KMT(:,:,bid))
./restart.F90:       KMT, HU, TAREA_R
./restart.F90:            where (k > KMT(:,:,iblock))
./state_mod.F90:                               k <= KMT(ib:ie,jb:je,bid))
./state_mod.F90:                               k <= KMT(ib:ie,jb:je,bid))
./state_mod.F90:                         c0, KMT(:,:,bid) >= k)
./state_mod.F90:                         c0, KMT(:,:,bid) >= k)
./state_mod.F90:                         c0, KMT(:,:,bid) >= k)
./state_mod.F90:                         c0, KMT(:,:,bid) >= k)
./state_mod.F90:                     ,c0, KMT(:,:,bid) >= k)
./state_mod.F90:                     ,c1, KMT(:,:,bid) >= k)
./state_mod.F90:                  c0, KMT(:,:,bid) >= k)
./state_mod.F90:                  c0, KMT(:,:,bid) >= k)
./sw_absorption.F90:           where (k < KMT(:,:,bid))
./sw_absorption.F90:           where (k < KMT(:,:,bid))
./sw_absorption.F90:           where (k < KMT(:,:,bid))
./sw_absorption.F90:           where (k < KMT(:,:,bid))
./tavg.F90:            if (k > KMT(i  ,j,   iblock)   .and.  &
./tavg.F90:                k > KMT(i+1,j,   iblock)   .and.  &
./tavg.F90:                k > KMT(i  ,j+1, iblock)   .and.  &
./tavg.F90:                k > KMT(i+1,j+1, iblock))   then
./tavg.F90:                     RMASK(:,:) = merge(c1, c0, k <= KMT(:,:,iblock)) 
./tavg.F90:   !*** KMT
./tavg.F90:        'KMT', dim1=i_dim, dim2=j_dim,                        &
./tavg.F90:         i2d_array =KMT(:,:,:) )
./tavg.F90:         trim(ccsm_time_invar(num,ns)%short_name) == 'KMT'          .or.   &
./tavg.F90:                              k > KMT(:,:,iblock))
./tavg.F90:        if (KMT(i,j,iblock) == 0) then
./tavg.F90:            if (KMT(ii,jj,iblock) /= 0) then
./tidal_mixing.F90:       where ( k < KMT(:,:,iblock) )
./tidal_mixing.F90:       where ( k <= KMT(:,:,iblock) )
./topostress.F90:      where (KMT(:,:,iblock) /= 0)
./topostress.F90:   where (KMT(:,:,bid) > 0) 
./topostress.F90:   where ((KMT(:,:,bid) /= 0) .and. (NB /= 0)) 
./vertical_mix.F90:         VTF(:,:,n,bid) = merge(STF(:,:,n), c0, KMT(:,:,bid) >= 1)
./vertical_mix.F90:                      ,c0, KMT(:,:,bid) > k)
./vertical_mix.F90:                         k == KMT(:,:,bid) .and.        &
./vertical_mix.F90:                             c0, k <= KMT(:,:,bid))
./vertical_mix.F90:                      ,c0, KMT(:,:,bid) > k)
./vertical_mix.F90:                         k == KMT(:,:,bid) .and.       &
./vertical_mix.F90:                             c0, k <= KMT(:,:,bid))
./vertical_mix.F90:           if (k > KMT(i,j,bid)) then
./vertical_mix.F90:              if (k == KMT(i,j,bid)) then
./vertical_mix.F90:           if (k > KMT(i,j,bid)) then
./vertical_mix.F90:              if (k == KMT(i,j,bid)) then
./vertical_mix.F90:         if (k < KMT(i,j,bid)) &
./vertical_mix.F90:                             ,c0, k < KMT(:,:,bid))
./vertical_mix.F90:                                k == KMT(:,:,bid) .and.        &
./vertical_mix.F90:                             ,c0, k < KMT(:,:,bid))
./vertical_mix.F90:                                k == KMT(:,:,bid) .and.        &
./vertical_mix.F90:             if (k > KMT(i,j,bid)) then
./vertical_mix.F90:                if (k == KMT(i,j,bid)) then
./vertical_mix.F90:             if (k > KMT(i,j,bid)) then
./vertical_mix.F90:                if (k == KMT(i,j,bid)) then
./vertical_mix.F90:         if (k < KMT(i,j,bid)) &
./vertical_mix.F90:                  where ((RHOK > RHOKP) .and. (k < KMT(:,:,bid)))
./vertical_mix.F90:                  where ((RHOK > RHOKP) .and. (k < KMT(:,:,bid)))
./vmix_const.F90:      where ((RHOK > RHOKP) .and. (k < KMT(:,:,bid)))
./vmix_kpp.F90:         if (k >= KMT(i,j,bid)) then
./vmix_kpp.F90:   where (KMT(:,:,bid) == 1)
./vmix_kpp.F90:         where (k <= KMT(:,:,bid))
./vmix_kpp.F90:         where (k <= KMT(:,:,bid))
./vmix_kpp.F90:      WORK0(:,:,k)   = merge(RI_LOC, WORK0(:,:,k-1), k <= KMT(:,:,bid))
./vmix_kpp.F90:            if (KMT(i,j,bid) >= 3) then
./vmix_kpp.F90:        where ( k == KMT(:,:,bid)-1  .or.  k == KMT(:,:,bid)-2 )
./vmix_kpp.F90:       if( k < KMT(i,j,bid) ) then
./vmix_kpp.F90:        if( k < KMT(i,j,bid) ) then
./vmix_kpp.F90:         if ( k >= KMT(i,j,bid) ) then
./vmix_kpp.F90:!  max values when Ricr never satisfied are KBL = KMT and
./vmix_kpp.F90:!  HBLT = -zgrid(KMT)
./vmix_kpp.F90:   KBL = merge(KMT(:,:,bid), 1, (KMT(:,:,bid) > 1))
./vmix_kpp.F90:                       c0, KMT(:,:,bid) >= kl)
./vmix_kpp.F90:                      c0, KMT(:,:,bid) >= kl)
./vmix_kpp.F90:         if ( KBL(i,j) == KMT(i,j,bid) .and.  &
./vmix_kpp.F90:         if (k-1 >= KMT(i,j,bid)) DBLOC(i,j,k-1) = c0
./vmix_kpp.F90:       if ( KMT(i,j,bid) /= 0 ) then
./vmix_kpp.F90:         if ( KMT(i-1,j,bid) == 0 ) then
./vmix_kpp.F90:         if ( KMT(i+1,j,bid) == 0 ) then
./vmix_kpp.F90:         if ( KMT(i,j-1,bid) == 0 ) then
./vmix_kpp.F90:         if ( KMT(i,j+1,bid) == 0 ) then
./vmix_kpp.F90:         if ( k == KMT(i,j,bid)  .and.  WORK2(i,j) > ztmp ) then
./vmix_kpp.F90:           if ( KMT(i,j,bid) /= 0            .and.  &
./vmix_rich.F90:         if (k < KMT(i,j,bid)) then
./vmix_rich.F90:         if (k < KMT(i,j,bid)) then
